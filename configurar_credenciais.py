#!/usr/bin/env python3
"""
Script Automatizado - Configura√ß√£o de Credenciais
Gabarita-AI Backend
"""

import os
import json
import sys
from pathlib import Path

def print_header():
    """Imprime o cabe√ßalho do script"""
    print("\n" + "=" * 60)
    print("üöÄ CONFIGURADOR AUTOM√ÅTICO - GABARITA-AI")
    print("üí∞ Configure e comece a ganhar dinheiro hoje!")
    print("=" * 60)

def configure_firebase():
    """Configura as credenciais do Firebase"""
    print("\nüî• CONFIGURA√á√ÉO FIREBASE")
    print("-" * 30)
    
    print("\nüìã INSTRU√á√ïES:")
    print("1. Acesse: https://console.firebase.google.com/")
    print("2. Crie um projeto (se n√£o tiver)")
    print("3. V√° em Configura√ß√µes > Contas de servi√ßo")
    print("4. Clique em 'Gerar nova chave privada'")
    print("5. Baixe o arquivo JSON")
    print("6. Informe o caminho do arquivo abaixo")
    
    while True:
        json_path = input("\nüìÅ Caminho do arquivo JSON do Firebase (ou 'pular'): ").strip()
        
        if json_path.lower() == 'pular':
            print("‚è≠Ô∏è Pulando configura√ß√£o do Firebase")
            return {}
        
        if not json_path:
            continue
            
        # Expandir ~ para home directory
        json_path = os.path.expanduser(json_path)
        
        # Remover aspas se houver
        json_path = json_path.strip('"\'')
        
        if not os.path.exists(json_path):
            print(f"‚ùå Arquivo n√£o encontrado: {json_path}")
            continue
            
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                firebase_data = json.load(f)
            
            # Extrair informa√ß√µes necess√°rias
            config = {
                'FIREBASE_PROJECT_ID': firebase_data.get('project_id', ''),
                'FIREBASE_PRIVATE_KEY_ID': firebase_data.get('private_key_id', ''),
                'FIREBASE_PRIVATE_KEY': firebase_data.get('private_key', '').replace('\n', '\\n'),
                'FIREBASE_CLIENT_EMAIL': firebase_data.get('client_email', ''),
                'FIREBASE_CLIENT_ID': firebase_data.get('client_id', ''),
                'FIREBASE_AUTH_URI': firebase_data.get('auth_uri', 'https://accounts.google.com/o/oauth2/auth'),
                'FIREBASE_TOKEN_URI': firebase_data.get('token_uri', 'https://oauth2.googleapis.com/token'),
            }
            
            print("\n‚úÖ Arquivo JSON lido com sucesso!")
            print(f"üìä Projeto: {config['FIREBASE_PROJECT_ID']}")
            print(f"üìß Email: {config['FIREBASE_CLIENT_EMAIL']}")
            
            return config
            
        except json.JSONDecodeError:
            print("‚ùå Erro: Arquivo JSON inv√°lido")
        except Exception as e:
            print(f"‚ùå Erro ao ler arquivo: {e}")

def configure_mercadopago():
    """Configura as credenciais do Mercado Pago"""
    print("\nüí≥ CONFIGURA√á√ÉO MERCADO PAGO")
    print("-" * 30)
    
    print("\nüìã INSTRU√á√ïES:")
    print("1. Acesse: https://www.mercadopago.com.br/developers/")
    print("2. Fa√ßa login na sua conta")
    print("3. V√° em 'Suas integra√ß√µes'")
    print("4. Crie uma aplica√ß√£o (se n√£o tiver)")
    print("5. Copie o Access Token")
    
    config = {}
    
    while True:
        access_token = input("\nüîë Access Token do Mercado Pago (ou 'pular'): ").strip()
        
        if access_token.lower() == 'pular':
            print("‚è≠Ô∏è Pulando configura√ß√£o do Mercado Pago")
            break
            
        if not access_token:
            continue
            
        # Validar formato do token
        if access_token.startswith('TEST-') or access_token.startswith('APP-'):
            config['MERCADO_PAGO_ACCESS_TOKEN'] = access_token
            
            if access_token.startswith('TEST-'):
                print("‚úÖ Token de TESTE configurado - use cart√µes de teste")
            else:
                print("‚úÖ Token de PRODU√á√ÉO configurado - pagamentos reais!")
            break
        else:
            print("‚ùå Token inv√°lido. Deve come√ßar com 'TEST-' ou 'APP-'")
    
    # Webhook secret (opcional)
    webhook_secret = input("\nüîê Webhook Secret (opcional, Enter para pular): ").strip()
    if webhook_secret:
        config['MERCADO_PAGO_WEBHOOK_SECRET'] = webhook_secret
        print("‚úÖ Webhook Secret configurado")
    
    return config

def configure_other_apis():
    """Configura outras APIs necess√°rias"""
    print("\nü§ñ CONFIGURA√á√ÉO OUTRAS APIs")
    print("-" * 30)
    
    config = {}
    
    # OpenAI
    print("\nüß† OpenAI API Key:")
    print("- Acesse: https://platform.openai.com/api-keys")
    print("- Crie uma chave se n√£o tiver")
    
    openai_key = input("üîë OpenAI API Key (ou Enter para pular): ").strip()
    if openai_key:
        config['OPENAI_API_KEY'] = openai_key
        print("‚úÖ OpenAI configurado")
    
    # Perplexity
    print("\nüîç Perplexity API Key:")
    print("- Acesse: https://www.perplexity.ai/settings/api")
    print("- Gere uma chave se n√£o tiver")
    
    perplexity_key = input("üîë Perplexity API Key (ou Enter para pular): ").strip()
    if perplexity_key:
        config['PERPLEXITY_API_KEY'] = perplexity_key
        print("‚úÖ Perplexity configurado")
    
    # Secret Key
    import secrets
    secret_key = secrets.token_urlsafe(32)
    config['SECRET_KEY'] = secret_key
    print(f"‚úÖ Secret Key gerado automaticamente")
    
    # URLs
    config['FRONTEND_URL'] = 'http://localhost:3000'
    config['BACKEND_URL'] = 'http://localhost:5000'
    config['CORS_ORIGINS'] = 'http://localhost:3000,https://seu-dominio.com'
    
    return config

def update_env_file(config):
    """Atualiza o arquivo .env com as configura√ß√µes"""
    print("\nüìù ATUALIZANDO ARQUIVO .env")
    print("-" * 30)
    
    env_path = Path('.env')
    
    # Ler arquivo existente se houver
    existing_config = {}
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_config[key] = value
    
    # Mesclar configura√ß√µes
    existing_config.update(config)
    
    # Escrever arquivo atualizado
    with open(env_path, 'w', encoding='utf-8') as f:
        f.write("# ===== CONFIGURA√á√ÉO GABARITA-AI =====\n")
        f.write("# Gerado automaticamente pelo configurador\n\n")
        
        # Firebase
        f.write("# ===== FIREBASE =====\n")
        firebase_keys = ['FIREBASE_PROJECT_ID', 'FIREBASE_PRIVATE_KEY_ID', 'FIREBASE_PRIVATE_KEY', 
                        'FIREBASE_CLIENT_EMAIL', 'FIREBASE_CLIENT_ID', 'FIREBASE_AUTH_URI', 'FIREBASE_TOKEN_URI']
        for key in firebase_keys:
            value = existing_config.get(key, '')
            if key == 'FIREBASE_PRIVATE_KEY' and value:
                f.write(f'{key}="{value}"\n')
            else:
                f.write(f'{key}={value}\n')
        
        # Mercado Pago
        f.write("\n# ===== MERCADO PAGO =====\n")
        mp_keys = ['MERCADO_PAGO_ACCESS_TOKEN', 'MERCADO_PAGO_WEBHOOK_SECRET']
        for key in mp_keys:
            value = existing_config.get(key, '')
            f.write(f'{key}={value}\n')
        
        # APIs
        f.write("\n# ===== APIs =====\n")
        api_keys = ['OPENAI_API_KEY', 'PERPLEXITY_API_KEY']
        for key in api_keys:
            value = existing_config.get(key, '')
            f.write(f'{key}={value}\n')
        
        # Outras configura√ß√µes
        f.write("\n# ===== CONFIGURA√á√ïES GERAIS =====\n")
        other_keys = ['SECRET_KEY', 'FRONTEND_URL', 'BACKEND_URL', 'CORS_ORIGINS']
        for key in other_keys:
            value = existing_config.get(key, '')
            f.write(f'{key}={value}\n')
    
    print(f"‚úÖ Arquivo .env atualizado com sucesso!")
    print(f"üìÅ Localiza√ß√£o: {env_path.absolute()}")

def test_configuration():
    """Testa a configura√ß√£o"""
    print("\nüß™ TESTANDO CONFIGURA√á√ÉO")
    print("-" * 30)
    
    try:
        # Executar script de teste
        import subprocess
        result = subprocess.run([sys.executable, 'test_configuracao.py'], 
                              capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Teste executado com sucesso!")
            print(result.stdout)
        else:
            print("‚ö†Ô∏è Teste executado com avisos:")
            print(result.stdout)
            if result.stderr:
                print("Erros:")
                print(result.stderr)
                
    except subprocess.TimeoutExpired:
        print("‚è∞ Teste demorou muito para executar")
    except Exception as e:
        print(f"‚ùå Erro ao executar teste: {e}")
        print("\nüí° Execute manualmente: python test_configuracao.py")

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    print("\nüéØ Este script vai configurar automaticamente:")
    print("   üî• Firebase (banco de dados e autentica√ß√£o)")
    print("   üí≥ Mercado Pago (pagamentos)")
    print("   ü§ñ APIs de IA (OpenAI, Perplexity)")
    print("   ‚öôÔ∏è Outras configura√ß√µes necess√°rias")
    
    input("\nüëÜ Pressione Enter para continuar...")
    
    # Configurar servi√ßos
    all_config = {}
    
    # Firebase
    firebase_config = configure_firebase()
    all_config.update(firebase_config)
    
    # Mercado Pago
    mp_config = configure_mercadopago()
    all_config.update(mp_config)
    
    # Outras APIs
    other_config = configure_other_apis()
    all_config.update(other_config)
    
    # Atualizar .env
    update_env_file(all_config)
    
    # Testar configura√ß√£o
    test_config = input("\nüß™ Executar teste de configura√ß√£o? (s/N): ").strip().lower()
    if test_config in ['s', 'sim', 'y', 'yes']:
        test_configuration()
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    
    configured_services = []
    if firebase_config:
        configured_services.append("üî• Firebase")
    if mp_config:
        configured_services.append("üí≥ Mercado Pago")
    if other_config.get('OPENAI_API_KEY'):
        configured_services.append("üß† OpenAI")
    if other_config.get('PERPLEXITY_API_KEY'):
        configured_services.append("üîç Perplexity")
    
    if configured_services:
        print("\n‚úÖ Servi√ßos configurados:")
        for service in configured_services:
            print(f"   {service}")
    
    print("\nüöÄ PR√ìXIMOS PASSOS:")
    print("   1. Execute: python src/main.py")
    print("   2. Acesse: http://localhost:5000")
    print("   3. Teste todas as funcionalidades")
    print("   4. Fa√ßa o deploy para produ√ß√£o")
    print("   5. COMECE A GANHAR DINHEIRO! üí∞")
    
    print("\nüìö DOCUMENTA√á√ÉO:")
    print("   üìñ GUIA_CONFIGURACAO_RAPIDA.md")
    print("   üìñ CONFIGURACAO_FIREBASE_MERCADOPAGO.md")
    
    print("\nüéØ BOA SORTE E MUITO SUCESSO!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Configura√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        print("\nüí° Tente executar novamente ou configure manualmente")